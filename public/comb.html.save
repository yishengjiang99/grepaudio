<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>rt</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mui/3.7.1/css/mui.min.css"
        integrity="sha256-Ryx96brW7LDribCqmld/zV3Rnt2cEGIo0XnhSPkbkTM=" crossorigin="anonymous" />
    <link rel="stylesheet" href="style.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <link rel="stylesheet" href="./simple-console.css">
    <script src="./simple-console.js"></script>
</head>

<body>
<button>start</button>
</body>
<script src='polyfills.js'></script>

<script type='module'>
    import AnalyzerView from './AnalyzerView.js';
    import Envelope from './envelope.js';
    import Comb from './comb.js';

    let ctx;
    async function start(deviceId) {
        try {
            ctx = new AudioContext();
            var audioCtx = ctx;
            var audioContext = ctx;
            var ampEnvelopeGain = ctx.createGain();

            var ampAttack = 0.1;
            var ampDecay = 0.2;
            var ampSustain = 3;
            var ampRelease = 0.02;
            var adsrs = [];
            const keys = 'asdfghj'.split("");
            const nodes = '65.41, 73.42, 82.41,87.31,98.00,110.00,123.47'.split(",");
            var masterGain = ctx.createGain();
            AnalyzerView(masterGain);
            
            keys.forEach((l, i) => {
                var LFO = ctx.createOscillator();
                LFO.frequency.value = nodes[i];
                var gain = ctx.createGain();
                gain.gain.value = 0;
                var gainEnvelope = new Envelope(0, 5, ampAttack, ampDecay, ampSustain, ampRelease, gain.gain);
                adsrs.push(gainEnvelope)
                LFO.connect(gain);
                var comb = new Comb(ctx,{delay:0.1,feedback:0.5});
                gain.connect(comb.input);
                comb.output.connect(masterGain);
                LFO.start(0);

            })

            window.addEventListener("keydown", function (e) {
                if (keys.indexOf(e.key) > -1) {
                    log('keydown')
                    var env = adsrs[keys.indexOf(e.key)];
                    env.trigger(ctx.currentTime);
                }
            })

            window.addEventListener("keyup", function (e) {
                if (keys.indexOf(e.key) > -1) {
                    log('keyup')
                    var env = adsrs[keys.indexOf(e.key)];
                    env.release(ctx.currentTime);
                }
            })

            return source;
        } catch (eerrr) {
            console.log(eerrr.message);
        }
    }
    $("button").onclick = function (e) {
        start();
    }
</script>

</body>

</html>
