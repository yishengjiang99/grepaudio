Script started on Tue Dec  1 15:02:50 2020
FS="${indelimiter- }"
read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ FS="${indelimiter- }"
bash-3.2$ read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return
bash-3.2$ test "${car}" || { true ; return ; }
bash-3.2$ ${function_name} "${car}" || echo -n "${car} "
test bash-3.2$ echo "${cdr}" | ${FUNCNAME} "${function_name}"
bash: : command not found
bash-3.2$ }
bash: syntax error near unexpected token `}'
bash-3.2$ ##################################################
bash-3.2$ ## generated by create-stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ##################################################
bash-3.2$ filter() { { local function_name ; function_name="${1}" ; }
>   local car 
>   local cdr 
>   local IFS 
>   IFS="${indelimiter- }" 
>   read -t 1 car cdr || return 
>   test "$( declare -f ${function_name} )" || return
>   test "${car}" || { true ; return ; }
>   ${function_name} "${car}" || echo -n "${car} "
>   echo "${cdr}" | ${FUNCNAME} "${function_name}"
> }
bash-3.2$ 
bash-3.2$  read -t 1 car cdr || return 
bash: return: can only `return' from a function or sourced script
bash-3.2$ sread -
bash: sread: command not found
bash-3.2$ read -t 1
s
bash-3.2$ set fl [open /proc/meminfo]
bash-3.2$ 
bash-3.2$ 
bash-3.2$ set data [read $fl]
bash-3.2$ close $fl
bash: close: command not found
bash-3.2$ set lines [split $data \n]
bash-3.2$ open /proc/meminfo][K
The file /proc/meminfo does not exist.
bash-3.2$ cat /prc[Koc/meminfo
cat: /proc/meminfo: No such file or directory
bash-3.2$ exit
exit

Script done on Tue Dec  1 15:54:52 2020
e}"
bash: : command not found
bash-3.2$ }
bash: syntax error near unexpected token `}'
bash-3.2$ ##################################################
bash-3.2$ ## generated by create-stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ##################################################
bash-3.2$ filter() { { local function_name ; function_name="${1}" ; }
>   local car 
>   local cdr 
>   local IFS 
>   IFS="${indelimiter- }" 
>   read -t 1 car cdr || return 
>   test "$( declare -f ${function_name} )" || return
>   test "${car}" || { true ; return ; }
>   ${function_name} "${car}" || echo -n "${car} "
>   echo "${cdr}" | ${FUNCNAME} "${function_name}"
> }
bash-3.2$ 
bash-3.2$  read -t 1 car cdr || return 
bash: return: can only `return' from a function or sourced script
bash-3.2$ sread -
bash: sread: command not found
bash-3.2$ read -t 1
s
bash-3.2$ set fl [open /proc/meminfo]
bash-3.2$ 
bash-3.2$ 
bash-3.2$ set data [read $fl]
bash-3.2$ close $fl
bash: close: command not found
bash-3.2$ set lines [split $data \n]
bash-3.2$ open /proc/meminfo][K
The file /proc/meminfo does not exist.
bash-3.2$ cat /prc[Koc/meminfo
cat: /proc/meminfo: No such file or directory
bash-3.2$ S
> IFS="${indelimiter- }"
> read -t 1 car cdr || return
> test "$( declare -f ${function_name} )" || return
> test "${car}" || { true ; return ; }
> ${function_name} "${car}" || echo -n "${car} "
> echo "${cdr}" | ${FUNCNAME} "${function_name}"
> }
bash-3.2$ ##################################################
bash-3.2$ ## generated by create-stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ###########
bash-3.2$ Script
 
#!/bin/bash
## filter
## version 0.0.1 - initial
##################################################
filter() { { local function_name ; functiScript started, output file is typescript
on_name="${1}" ; }
local car
local cdr
local IFS
IFS="${indelimiter- }"
read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return found
bash-3.2$ 36
bash: 36: command not found
bash-3.2$ 49
bash: 49: command not found
64
81
100
Filter function using read
Suppose we want a filter function that takes a list and returns a sublist of elements satifying conditions set by another function. Here is how we may implement a filtbash-3.2$ 64
bash: 64: command not found
bash-3.2$ 81
bash: 81: command not found
bash-3.2$ 100
bash: 100: command not found
bash-3.2$ Filter function using read
bash: Filter: command not found
bash-3.2$ Suppose we want a filter function that takes a list and returns a sublist of elements satifying conditions set by another function. Here  is how we may implement a filter function using read.
bash: Suppose: command not found
bash-3.2$ 
bash-3.2$ 
bash-3.2$ Script
Script started, output file is typescript
filter
## version 0.0.1 - initial
################
The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ filter
## version 0.0.1 - initial
##################################################
filter() { { lobash: filter: command not found
bash-3.2$ ## version 0.0.1 - initial
ba read -t 1 car cdr || return 
bash: return: can only `return' from a function or sourced script
bash-3.2$ sread -
bash: sread: command not found
bash-3.2$ read -t 1
s
bash-3.2$ set fl [open /proc/meminfo]
bash-3.2$ 
bash-3.2$ 
bash-3.2$ set data [read $fl]
bash-3.2$ close $fl
bash: close: command not found
bash-3.2$ set lines [split $data \n]
bash-3.2$ open /proc/meminfo][K
The file /proc/meminfo does not exist.
bash-3.2$ cat /prc[Koc/meminfo
cat: /proc/meminfo: No such file or directory
bash-3.2$ 2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ###########
bash-3.2$ Script
 
#!/bin/bash
## filter
## version 0.0.1 - initial
##################################################
filter() { { local function_name ; functiScript started, output file is typescript
on_name="${1}" ; }
local car
local cdr
local IFS
IFS="${indelimiter- }"
read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ FS="${indelimiter- }"
bash-3.2$ read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return
bash-3.2$ test "${car}" || { true ; return ; }
bash-3.2$ ${function_name} "${car}" || echo -n "${car} "
test bash-3.2$ echo "${cdr}" | ${FUNCNAME} "${function_name}"
bash: : command not found
bash-3.2$ }
bash: syntax error near unexpected token `}'
bash-3.2$ ##################################################
bash-3.2$ ## generated by create-stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ##################################################
bash-3.2$ filter() { { local function_name ; function_name="${1}" ; }
>   local car 
>   local cdr 
>   local IFS 
>   IFS="${indelimiter- }" 
>   read -t 1 car cdr || return 
>   test "$( declare -f ${function_name} )" || return
>   test "${car}" || { true ; return ; }
>   ${function_name} "${car}" || echo -n "${car} "
>   echo "${cdr}" | ${FUNCNAME} "${function_name}"
> }
bash-3.2$ 
bash-3.2$  read -t 1 car cdr || return 
bash: return: can only `return' from a function or sourced script
bash-3.2$ sread -
bash: sread: command not found
bash-3.2$ read -t 1
s
bash-3.2$ set fl [open /proc/meminfo]
bash-3.2$ 
bash-3.2$ 
bash-3.2$ set data [read $fl]
bash-3.2$ close $fl
bash: close: command not found
bash-3.2$ set lines [split $data \n]
bash-3.2$ open /proc/meminfo][K
The file /proc/meminfo does not exist.
bash-3.2$ cat /prc[Koc/meminfo
cat: /proc/meminfo: No such file or directory
bash-3.2$                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  -stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ###########
bash-3.2$ Script
 
#!/bin/bash
## filter
## version 0.0.1 - initial
##################################################
filter() { { local function_name ; functiScript started, output file is typescript
on_name="${1}" ; }
local car
local cdr
local IFS
IFS="${indelimiter- }"
read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ FS="${indelimiter- }"
bash-3.2$ read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return
bash-3.2$ test "${car}" || { true ; return ; }
bash-3.2$ ${function_name} "${car}" || echo -n "${car} "
test bash-3.2$ echo "${cdr}" | ${FUNCNAME} "${function_name}"
bash: : command not found
bash-3.2$ }
bash: syntax error near unexpected token `}'
bash-3.2$ ##################################################
bash-3.2$ ## generated by create-stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ##################################################
bash-3.2$ filter() { { local function_name ; function_name="${1}" ; }
>   local car 
>   local cdr 
>   local IFS 
>   IFS="${indelimiter- }" 
>   read -t 1 car cdr || return 
>   test "$( declare -f ${function_name} )" || return
>   test "${car}" || { true ; return ; }
>   ${function_name} "${car}" || echo -n "${car} "
>   echo "${cdr}" | ${FUNCNAME} "${function_name}"
> }
bash-3.2$ 
bash-3.2$  read -t 1 car cdr || return 
bash: return: can only `return' from a function or sourced script
bash-3.2$ sread -
bash: sread: command not found
bash-3.2$ read -t 1
s
bash-3.2$ set fl [open /proc/meminfo]
bash-3.2$ 
bash-3.2$ 
bash-3.2$ set data [read $fl]
bash-3.2$ close $fl
bash: close: command not found
bash-3.2$ set lines [split $data \n]
bash-3.2$ open /proc/meminfo][K
The file /proc/meminfo does not exist.
bash-3.2$ cat /prc[Koc/meminfo
cat: /proc/meminfo: No such file or directory
bash-3.2$ to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ filter
## version 0.0.1 - initial
##################################################
filter() { { lobash: filter: command not found
bash-3.2$ ## version 0.0.1 - initial
bash-3.2$ ##################################################
bash-3.2$ filter() { { local function_name ; function_name="${1}" ; }
> local car
> local cdr
> local IFS
> IFS="${indelimiter- }"
> read -t 1 car cdr || return
> test "$( declare -f ${function_name} )" || return
> test "${car}" || { true ; return ; }
> ${function_name} "${car}" || echo -n "${car} "
> echo "${cdr}" | ${FUNCNAME} "${function_name}"
> }
bash-3.2$ ##################################################
bash-3.2$ ## generated by create-stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ###########
bash-3.2$ Script
 
#!/bin/bash
## filter
## version 0.0.1 - initial
##################################################
filter() { { local function_name ; functiScript started, output file is typescript
on_name="${1}" ; }
local car
local cdr
local IFS
IFS="${indelimiter- }"
read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ FS="${indelimiter- }"
bash-3.2$ read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return
bash-3.2$ test "${car}" || { true ; return ; }
bash-3.2$ ${function_name} "${car}" || echo -n "${car} "
test bash-3.2$ echo "${cdr}" | ${FUNCNAME} "${funct: Output: command not found
bash-3.2$ 
bash-3.2$ 1
bash: 1: command not found
bash-3.2$ 4
bash: 4: command not found
bash-3.2$ 9
bash: 9: command not found
bash-3.2$ 16
bash: 16: command not found
bash-3.2$ 25
bash: 25: command not found
bash-3.2$ 36
bash: 36: command not found
bash-3.2$ 49
bash: 49: command not found
64
81
100
Filter function using read
Suppose we want a filter function that takes a list and returns a sublist of elements satifying conditions set by another function. Here is how we may implement a filtbash-3.2$ 64
bash: 64: command not found
bash-3.2$ 81
bash: 81: command not found
bash-3.2$ 100
bash: 100: command not found
bash-3.2$ Filter function using read
bash: Filter: command not found
bash-3.2$ Suppose we want a filter fun read -t 1 car cdr || return 
bash: return: can only `return' from a function or sourced script
bash-3.2$ sread -
bash: sread: command not found
bash-3.2$ read -t 1
s
bash-3.2$ set fl [open /proc/meminfo]
bash-3.2$ 
bash-3.2$ 
bash-3.2$ set data [read $fl]
bash-3.2$ close $fl
bash: close: command not found
bash-3.2$ set lines [split $data \n]
bash-3.2$ open /proc/meminfo][K
The file /proc/meminfo does not exist.
bash-3.2$ cat /prc[Koc/meminfo
cat: /proc/meminfo: No such file or directory
bash-3.2$ 034hbash-3.2$ filter
## version 0.0.1 - initial
##################################################
filter() { { lobash: filter: command not found
bash-3.2$ ## version 0.0.1 - initial
bash-3.2$ ##################################################
bash-3.2$ filter() { { local function_name ; function_name="${1}" ; }
> local car
> local cdr
> local IFS
> IFS="${indelimiter- }"
> read -t 1 car cdr || return
> test "$( declare -f ${function_name} )" || return
> test "${car}" || { true ; return ; }
> ${function_name} "${car}" || echo -n "${car} "
> echo "${cdr}" | ${FUNCNAME} "${function_name}"
> }
bash-3.2$ ##################################################
bash-3.2$ ## generated by create-stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ###########
bash-3.2$ Script
 
#!/bin/bash
## filter
## version 0.0.1 - initial
##################################################
filter() { { local function_name ; functiScript started, output file is typescript
on_name="${1}" ; }
local car
local cdr
local IFS
IFS="${indelimiter- }"
read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ FS="${indelimiter- }"
bash-3.2$ read -t 1 car cdr || return
test "$( declare -f ${function_name} )" || return
bash-3.2$ test "${car}" || { true ; return ; }
bash-3.2$ ${function_name} "${car}" || echo -n "${car} "
test bash-3.2$ echo "${cdr}" | ${FUNCNAME} "${function_name}"
bash: : command not found
bash-3.2$ }
bash: syntax error near unexpected token `}'
bash-3.2$ ##################################################
bash-3.2$ ## generated by create-stub2.sh v0.1.2
bash-3.2$ ## on Tue, 18 Jun 2019 13:19:54 +0900
bash-3.2$ ## see <https://github.com/temptemp3/sh2>
bash-3.2$ ##################################################
bash-3.2$ filter() { { local function_name ; function_name="${1}" ; }
>   local car 
>   local cdr 
>   local IFS 
>   IFS="${indelimiter- }" 
>   read -t 1 car cdr || return 
>   test "$( declare -f ${function_name} )" || return
>   test "${car}" || { true ; return ; }
>   ${function_name} "${car}" || echo -n "${car} "
>   echo "${cdr}" | ${FUNCNAME} "${function_name}"
> }
bash-3.2$ 
bash-3.2$  read -t 1 car cdr || return 
bash: return: can only `return' from a function or sourced script
bash-3.2$ sread -
bash: sread: command not found
bash-3.2$ read -t 1
s
bash-3.2$ set fl [open /proc/meminfo]
bash-3.2$ 
bash-3.2$ 
bash-3.2$ set data [read $fl]
bash-3.2$ close $fl
bash: close: command not found
bash-3.2$ set lines [split $data \n]
bash-3.2$ open /proc/meminfo][K
The file /proc/meminfo does not exist.
bash-3.2$ cat /prc[Koc/meminfo
cat: /proc/meminfo: No such file or directory
bash-3.2$ 